{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","value","handleClear","type","onChange","onClick","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","a","target","console","log","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6VAGaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCJSC,G,MAAW,SAACR,GAAD,OACtB,qBAAKC,UAAU,YAAf,SAEGD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCRZM,G,MAAY,SAAC,GAAD,IACvBC,EADuB,EACvBA,YACAC,EAFuB,EAEvBA,aACAC,EAHuB,EAGvBA,MACAC,EAJuB,EAIvBA,YAJuB,OAMvB,qCACE,uBACEd,UAAU,SACVe,KAAK,OACLF,MAAOA,EACPF,YAAaA,EACbK,SAAUJ,IAEZ,wBAAQK,QAASH,SCXfI,E,4MACJC,MAAQ,CACNX,SAAU,GACVY,YAAa,I,uDAIf,WAAqB,IAAD,OAIlBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAElB,SAAUiB,S,oBAW/C,WAAU,IAAD,OACP,EAAkCE,KAAKR,MAA/BX,EAAR,EAAQA,SAAUY,EAAlB,EAAkBA,YACZQ,EAAmBpB,EAASqB,QAAO,SAAC1B,GAAD,OACvCA,EAAQE,KAAKyB,cAAcC,SAASX,EAAYU,kBAOlD,OACE,sBAAK9B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACEW,YAAY,kBACZG,YAAa,WACX,EAAKY,SAAS,CAAEN,YAAa,MAE/BP,MAAOc,KAAKR,MAAMC,YAClBR,aAAY,uCAAE,WAAOoB,GAAP,SAAAC,EAAA,sEACN,EAAKP,SAAS,CAAEN,YAAaY,EAAEE,OAAOrB,QADhC,OAEZsB,QAAQC,IAAI,EAAKjB,MAAMC,aAFX,2CAAF,wDAKd,cAAC,EAAD,CAAUZ,SAAUoB,W,GAhDVS,aAsDHnB,IC/CAoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.02f1022f.chunk.js","sourcesContent":["import react from \"react\";\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = (props) => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      alt=\"monster\"\r\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n    />\r\n    <h2> {props.monster.name} </h2>\r\n    <p> {props.monster.email} </p>\r\n  </div>\r\n);\r\n","import react from \"react\";\r\n\r\nimport { Card } from \"../card/card.component\";\r\n\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList = (props) => (\r\n  <div className=\"card-list\">\r\n    {/* {props.monsters.length == 0 ? \"nema monstrumi\" : \"\"} */}\r\n    {props.monsters.map((monster) => (\r\n      <Card key={monster.id} monster={monster} />\r\n    ))}\r\n  </div>\r\n);\r\n","import \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({\r\n  placeholder,\r\n  handleChange,\r\n  value,\r\n  handleClear,\r\n}) => (\r\n  <>\r\n    <input\r\n      className=\"search\"\r\n      type=\"text\"\r\n      value={value}\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    />\r\n    <button onClick={handleClear}></button>\r\n  </>\r\n);\r\n","import \"./App.css\";\nimport { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  state = {\n    monsters: [],\n    searchField: \"\",\n    // mounted: false,\n  };\n\n  componentDidMount() {\n    // setTimeout(() => {\n    //   this.setState({ mounted: true });\n    // }, 5000);\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.mounted == true && this.state.mounted != prevState.mounted) {\n  //     fetch(\"https://jsonplaceholder.typicode.com/users\")\n  //       .then((response) => response.json())\n  //       .then((users) => this.setState({ monsters: users }));\n  //   }\n  // }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    // if (!this.state.mounted) {\n    //   return <div>is not mounted</div>;\n    // }\n\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <SearchBox\n          placeholder=\"search monsters\"\n          handleClear={() => {\n            this.setState({ searchField: \"\" });\n          }}\n          value={this.state.searchField}\n          handleChange={async (e) => {\n            await this.setState({ searchField: e.target.value });\n            console.log(this.state.searchField);\n          }}\n        />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}